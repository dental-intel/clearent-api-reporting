<?php
/**
 * MerchantClosedBatches200ResponseMerchantClosedBatchesInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ClearentReportingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Clearent Reporting API
 *
 * Clearent API written by the members of Dental Intelligence.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.1.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ClearentReportingApi\Model;

use \ArrayAccess;
use \ClearentReportingApi\ObjectSerializer;

/**
 * MerchantClosedBatches200ResponseMerchantClosedBatchesInner Class Doc Comment
 *
 * @category Class
 * @package  ClearentReportingApi
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MerchantClosedBatches200ResponseMerchantClosedBatchesInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'merchantClosedBatches_200_response_merchantClosedBatches_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'backup_withholding' => 'string',
        'batch_fees' => 'string',
        'batch_number' => 'string',
        'batch_total' => 'string',
        'closed_date' => 'string',
        'conveyed_amount' => 'string',
        'conveyed_count' => 'string',
        'deposit_account_number' => 'string',
        'deposit_amount' => 'string',
        'funded_date' => 'string',
        'merchant_number' => 'string',
        'refund_count' => 'string',
        'refunds' => 'string',
        'row_number' => 'string',
        'sales' => 'string',
        'sales_count' => 'string',
        'settle_date' => 'string',
        'store_number' => 'string',
        'terminal_id' => 'string',
        'terminal_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'backup_withholding' => null,
        'batch_fees' => null,
        'batch_number' => null,
        'batch_total' => null,
        'closed_date' => null,
        'conveyed_amount' => null,
        'conveyed_count' => null,
        'deposit_account_number' => null,
        'deposit_amount' => null,
        'funded_date' => null,
        'merchant_number' => null,
        'refund_count' => null,
        'refunds' => null,
        'row_number' => null,
        'sales' => null,
        'sales_count' => null,
        'settle_date' => null,
        'store_number' => null,
        'terminal_id' => null,
        'terminal_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'backup_withholding' => false,
		'batch_fees' => false,
		'batch_number' => false,
		'batch_total' => false,
		'closed_date' => false,
		'conveyed_amount' => false,
		'conveyed_count' => false,
		'deposit_account_number' => false,
		'deposit_amount' => false,
		'funded_date' => false,
		'merchant_number' => false,
		'refund_count' => false,
		'refunds' => false,
		'row_number' => false,
		'sales' => false,
		'sales_count' => false,
		'settle_date' => false,
		'store_number' => false,
		'terminal_id' => false,
		'terminal_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'backup_withholding' => 'backupWithholding',
        'batch_fees' => 'batchFees',
        'batch_number' => 'batchNumber',
        'batch_total' => 'batchTotal',
        'closed_date' => 'closedDate',
        'conveyed_amount' => 'conveyedAmount',
        'conveyed_count' => 'conveyedCount',
        'deposit_account_number' => 'depositAccountNumber',
        'deposit_amount' => 'depositAmount',
        'funded_date' => 'fundedDate',
        'merchant_number' => 'merchantNumber',
        'refund_count' => 'refundCount',
        'refunds' => 'refunds',
        'row_number' => 'rowNumber',
        'sales' => 'sales',
        'sales_count' => 'salesCount',
        'settle_date' => 'settleDate',
        'store_number' => 'storeNumber',
        'terminal_id' => 'terminalID',
        'terminal_name' => 'terminalName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'backup_withholding' => 'setBackupWithholding',
        'batch_fees' => 'setBatchFees',
        'batch_number' => 'setBatchNumber',
        'batch_total' => 'setBatchTotal',
        'closed_date' => 'setClosedDate',
        'conveyed_amount' => 'setConveyedAmount',
        'conveyed_count' => 'setConveyedCount',
        'deposit_account_number' => 'setDepositAccountNumber',
        'deposit_amount' => 'setDepositAmount',
        'funded_date' => 'setFundedDate',
        'merchant_number' => 'setMerchantNumber',
        'refund_count' => 'setRefundCount',
        'refunds' => 'setRefunds',
        'row_number' => 'setRowNumber',
        'sales' => 'setSales',
        'sales_count' => 'setSalesCount',
        'settle_date' => 'setSettleDate',
        'store_number' => 'setStoreNumber',
        'terminal_id' => 'setTerminalId',
        'terminal_name' => 'setTerminalName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'backup_withholding' => 'getBackupWithholding',
        'batch_fees' => 'getBatchFees',
        'batch_number' => 'getBatchNumber',
        'batch_total' => 'getBatchTotal',
        'closed_date' => 'getClosedDate',
        'conveyed_amount' => 'getConveyedAmount',
        'conveyed_count' => 'getConveyedCount',
        'deposit_account_number' => 'getDepositAccountNumber',
        'deposit_amount' => 'getDepositAmount',
        'funded_date' => 'getFundedDate',
        'merchant_number' => 'getMerchantNumber',
        'refund_count' => 'getRefundCount',
        'refunds' => 'getRefunds',
        'row_number' => 'getRowNumber',
        'sales' => 'getSales',
        'sales_count' => 'getSalesCount',
        'settle_date' => 'getSettleDate',
        'store_number' => 'getStoreNumber',
        'terminal_id' => 'getTerminalId',
        'terminal_name' => 'getTerminalName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('backup_withholding', $data ?? [], null);
        $this->setIfExists('batch_fees', $data ?? [], null);
        $this->setIfExists('batch_number', $data ?? [], null);
        $this->setIfExists('batch_total', $data ?? [], null);
        $this->setIfExists('closed_date', $data ?? [], null);
        $this->setIfExists('conveyed_amount', $data ?? [], null);
        $this->setIfExists('conveyed_count', $data ?? [], null);
        $this->setIfExists('deposit_account_number', $data ?? [], null);
        $this->setIfExists('deposit_amount', $data ?? [], null);
        $this->setIfExists('funded_date', $data ?? [], null);
        $this->setIfExists('merchant_number', $data ?? [], null);
        $this->setIfExists('refund_count', $data ?? [], null);
        $this->setIfExists('refunds', $data ?? [], null);
        $this->setIfExists('row_number', $data ?? [], null);
        $this->setIfExists('sales', $data ?? [], null);
        $this->setIfExists('sales_count', $data ?? [], null);
        $this->setIfExists('settle_date', $data ?? [], null);
        $this->setIfExists('store_number', $data ?? [], null);
        $this->setIfExists('terminal_id', $data ?? [], null);
        $this->setIfExists('terminal_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets backup_withholding
     *
     * @return string|null
     */
    public function getBackupWithholding()
    {
        return $this->container['backup_withholding'];
    }

    /**
     * Sets backup_withholding
     *
     * @param string|null $backup_withholding Amount of backup withholding.
     *
     * @return self
     */
    public function setBackupWithholding($backup_withholding)
    {

        if (is_null($backup_withholding)) {
            throw new \InvalidArgumentException('non-nullable backup_withholding cannot be null');
        }

        $this->container['backup_withholding'] = $backup_withholding;

        return $this;
    }

    /**
     * Gets batch_fees
     *
     * @return string|null
     */
    public function getBatchFees()
    {
        return $this->container['batch_fees'];
    }

    /**
     * Sets batch_fees
     *
     * @param string|null $batch_fees Amount of fees assessed on the batch.
     *
     * @return self
     */
    public function setBatchFees($batch_fees)
    {

        if (is_null($batch_fees)) {
            throw new \InvalidArgumentException('non-nullable batch_fees cannot be null');
        }

        $this->container['batch_fees'] = $batch_fees;

        return $this;
    }

    /**
     * Gets batch_number
     *
     * @return string|null
     */
    public function getBatchNumber()
    {
        return $this->container['batch_number'];
    }

    /**
     * Sets batch_number
     *
     * @param string|null $batch_number 3 digit number of the batch for the specific merchant, store, and terminal.
     *
     * @return self
     */
    public function setBatchNumber($batch_number)
    {

        if (is_null($batch_number)) {
            throw new \InvalidArgumentException('non-nullable batch_number cannot be null');
        }

        $this->container['batch_number'] = $batch_number;

        return $this;
    }

    /**
     * Gets batch_total
     *
     * @return string|null
     */
    public function getBatchTotal()
    {
        return $this->container['batch_total'];
    }

    /**
     * Sets batch_total
     *
     * @param string|null $batch_total Net amount of the batch.
     *
     * @return self
     */
    public function setBatchTotal($batch_total)
    {

        if (is_null($batch_total)) {
            throw new \InvalidArgumentException('non-nullable batch_total cannot be null');
        }

        $this->container['batch_total'] = $batch_total;

        return $this;
    }

    /**
     * Gets closed_date
     *
     * @return string|null
     */
    public function getClosedDate()
    {
        return $this->container['closed_date'];
    }

    /**
     * Sets closed_date
     *
     * @param string|null $closed_date Date and time batch was closed.
     *
     * @return self
     */
    public function setClosedDate($closed_date)
    {

        if (is_null($closed_date)) {
            throw new \InvalidArgumentException('non-nullable closed_date cannot be null');
        }

        $this->container['closed_date'] = $closed_date;

        return $this;
    }

    /**
     * Gets conveyed_amount
     *
     * @return string|null
     */
    public function getConveyedAmount()
    {
        return $this->container['conveyed_amount'];
    }

    /**
     * Sets conveyed_amount
     *
     * @param string|null $conveyed_amount Total conveyed amount.
     *
     * @return self
     */
    public function setConveyedAmount($conveyed_amount)
    {

        if (is_null($conveyed_amount)) {
            throw new \InvalidArgumentException('non-nullable conveyed_amount cannot be null');
        }

        $this->container['conveyed_amount'] = $conveyed_amount;

        return $this;
    }

    /**
     * Gets conveyed_count
     *
     * @return string|null
     */
    public function getConveyedCount()
    {
        return $this->container['conveyed_count'];
    }

    /**
     * Sets conveyed_count
     *
     * @param string|null $conveyed_count Number of conveyed transactions.
     *
     * @return self
     */
    public function setConveyedCount($conveyed_count)
    {

        if (is_null($conveyed_count)) {
            throw new \InvalidArgumentException('non-nullable conveyed_count cannot be null');
        }

        $this->container['conveyed_count'] = $conveyed_count;

        return $this;
    }

    /**
     * Gets deposit_account_number
     *
     * @return string|null
     */
    public function getDepositAccountNumber()
    {
        return $this->container['deposit_account_number'];
    }

    /**
     * Sets deposit_account_number
     *
     * @param string|null $deposit_account_number The Merchants bank account number.
     *
     * @return self
     */
    public function setDepositAccountNumber($deposit_account_number)
    {

        if (is_null($deposit_account_number)) {
            throw new \InvalidArgumentException('non-nullable deposit_account_number cannot be null');
        }

        $this->container['deposit_account_number'] = $deposit_account_number;

        return $this;
    }

    /**
     * Gets deposit_amount
     *
     * @return string|null
     */
    public function getDepositAmount()
    {
        return $this->container['deposit_amount'];
    }

    /**
     * Sets deposit_amount
     *
     * @param string|null $deposit_amount Amount deposited into Merchant's account.
     *
     * @return self
     */
    public function setDepositAmount($deposit_amount)
    {

        if (is_null($deposit_amount)) {
            throw new \InvalidArgumentException('non-nullable deposit_amount cannot be null');
        }

        $this->container['deposit_amount'] = $deposit_amount;

        return $this;
    }

    /**
     * Gets funded_date
     *
     * @return string|null
     */
    public function getFundedDate()
    {
        return $this->container['funded_date'];
    }

    /**
     * Sets funded_date
     *
     * @param string|null $funded_date Date funding was expected to be made to the merchant.
     *
     * @return self
     */
    public function setFundedDate($funded_date)
    {

        if (is_null($funded_date)) {
            throw new \InvalidArgumentException('non-nullable funded_date cannot be null');
        }

        $this->container['funded_date'] = $funded_date;

        return $this;
    }

    /**
     * Gets merchant_number
     *
     * @return string|null
     */
    public function getMerchantNumber()
    {
        return $this->container['merchant_number'];
    }

    /**
     * Sets merchant_number
     *
     * @param string|null $merchant_number Merchant MID Number.
     *
     * @return self
     */
    public function setMerchantNumber($merchant_number)
    {

        if (is_null($merchant_number)) {
            throw new \InvalidArgumentException('non-nullable merchant_number cannot be null');
        }

        $this->container['merchant_number'] = $merchant_number;

        return $this;
    }

    /**
     * Gets refund_count
     *
     * @return string|null
     */
    public function getRefundCount()
    {
        return $this->container['refund_count'];
    }

    /**
     * Sets refund_count
     *
     * @param string|null $refund_count Number of refund transactions.
     *
     * @return self
     */
    public function setRefundCount($refund_count)
    {

        if (is_null($refund_count)) {
            throw new \InvalidArgumentException('non-nullable refund_count cannot be null');
        }

        $this->container['refund_count'] = $refund_count;

        return $this;
    }

    /**
     * Gets refunds
     *
     * @return string|null
     */
    public function getRefunds()
    {
        return $this->container['refunds'];
    }

    /**
     * Sets refunds
     *
     * @param string|null $refunds Total refund amount.
     *
     * @return self
     */
    public function setRefunds($refunds)
    {

        if (is_null($refunds)) {
            throw new \InvalidArgumentException('non-nullable refunds cannot be null');
        }

        $this->container['refunds'] = $refunds;

        return $this;
    }

    /**
     * Gets row_number
     *
     * @return string|null
     */
    public function getRowNumber()
    {
        return $this->container['row_number'];
    }

    /**
     * Sets row_number
     *
     * @param string|null $row_number row_number
     *
     * @return self
     */
    public function setRowNumber($row_number)
    {

        if (is_null($row_number)) {
            throw new \InvalidArgumentException('non-nullable row_number cannot be null');
        }

        $this->container['row_number'] = $row_number;

        return $this;
    }

    /**
     * Gets sales
     *
     * @return string|null
     */
    public function getSales()
    {
        return $this->container['sales'];
    }

    /**
     * Sets sales
     *
     * @param string|null $sales Total sales amount.
     *
     * @return self
     */
    public function setSales($sales)
    {

        if (is_null($sales)) {
            throw new \InvalidArgumentException('non-nullable sales cannot be null');
        }

        $this->container['sales'] = $sales;

        return $this;
    }

    /**
     * Gets sales_count
     *
     * @return string|null
     */
    public function getSalesCount()
    {
        return $this->container['sales_count'];
    }

    /**
     * Sets sales_count
     *
     * @param string|null $sales_count Number of sales transactions in the batch.
     *
     * @return self
     */
    public function setSalesCount($sales_count)
    {

        if (is_null($sales_count)) {
            throw new \InvalidArgumentException('non-nullable sales_count cannot be null');
        }

        $this->container['sales_count'] = $sales_count;

        return $this;
    }

    /**
     * Gets settle_date
     *
     * @return string|null
     */
    public function getSettleDate()
    {
        return $this->container['settle_date'];
    }

    /**
     * Sets settle_date
     *
     * @param string|null $settle_date Date the batch was settled.
     *
     * @return self
     */
    public function setSettleDate($settle_date)
    {

        if (is_null($settle_date)) {
            throw new \InvalidArgumentException('non-nullable settle_date cannot be null');
        }

        $this->container['settle_date'] = $settle_date;

        return $this;
    }

    /**
     * Gets store_number
     *
     * @return string|null
     */
    public function getStoreNumber()
    {
        return $this->container['store_number'];
    }

    /**
     * Sets store_number
     *
     * @param string|null $store_number 4-digit store identification number representing the store where the terminal is located.
     *
     * @return self
     */
    public function setStoreNumber($store_number)
    {

        if (is_null($store_number)) {
            throw new \InvalidArgumentException('non-nullable store_number cannot be null');
        }

        $this->container['store_number'] = $store_number;

        return $this;
    }

    /**
     * Gets terminal_id
     *
     * @return string|null
     */
    public function getTerminalId()
    {
        return $this->container['terminal_id'];
    }

    /**
     * Sets terminal_id
     *
     * @param string|null $terminal_id 4-digit number assigned to a terminal.
     *
     * @return self
     */
    public function setTerminalId($terminal_id)
    {

        if (is_null($terminal_id)) {
            throw new \InvalidArgumentException('non-nullable terminal_id cannot be null');
        }

        $this->container['terminal_id'] = $terminal_id;

        return $this;
    }

    /**
     * Gets terminal_name
     *
     * @return string|null
     */
    public function getTerminalName()
    {
        return $this->container['terminal_name'];
    }

    /**
     * Sets terminal_name
     *
     * @param string|null $terminal_name Customer specified name for the terminal.
     *
     * @return self
     */
    public function setTerminalName($terminal_name)
    {

        if (is_null($terminal_name)) {
            throw new \InvalidArgumentException('non-nullable terminal_name cannot be null');
        }

        $this->container['terminal_name'] = $terminal_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


